# Copyright (C) Markus Franz Xaver Johannes Oberhumer
# CC CompilationCheck: test zigcc

# build with "zig cc"; see https://ziglang.org/download/

name: 'Weekly CI CC - zigcc'
on:
  schedule: [cron: '40 2 * * 3'] # run weekly Wednesday 02:40 UTC
  workflow_dispatch:
env:
  CMAKE_REQUIRED_QUIET: 'OFF'
  CMAKE_VERBOSE_MAKEFILE: 'ON'
  CTEST_OUTPUT_ON_FAILURE: 'ON'
  DEBIAN_FRONTEND: noninteractive
  UPX_CMAKE_BUILD_FLAGS: --verbose
  UPX_CMAKE_CONFIG_FLAGS: -Wdev --warn-uninitialized
  UPX_DEBUG_TEST_FLOAT_DIVISION_BY_ZERO: 1
  # 2024-03-23
  ZIG_DIST_VERSION: 0.12.0-dev.3429+13a9d94a8

jobs:
  job-linux-zigcc: # uses cmake + make
    if: github.repository_owner == 'upx'
    name: ${{ format('zigcc {0} {1}', matrix.zig_target, matrix.zig_pic) }}
    runs-on: ubuntu-latest
    container: 'alpine:3.19'
    strategy:
      fail-fast: false
      matrix:
        include:
          - { zig_target: aarch64-linux-musl, qemu: qemu-aarch64 }
          - { zig_target: aarch64-linux-musl, qemu: qemu-aarch64, zig_pic: -fPIE }
          - { zig_target: aarch64-macos-none }
          - { zig_target: aarch64-macos.11.0-none }
          - { zig_target: aarch64-macos.12.0-none }
          - { zig_target: aarch64-macos.13.0-none }
          - { zig_target: aarch64-windows-gnu }
          - { zig_target: arm-linux-musleabihf, qemu: qemu-arm }
          - { zig_target: arm-linux-musleabihf, qemu: qemu-arm, zig_pic: -fPIE }
          - { zig_target: i386-linux-musl, qemu: qemu-i386 -cpu Conroe }
          - { zig_target: i386-linux-musl, qemu: qemu-i386 -cpu Conroe, zig_pic: -fPIE }
          - { zig_target: i386-windows-gnu }
          # mips and mipsel: bad hard-float code generation; see https://github.com/upx/upx/issues/788
          - { zig_target: mips-linux-musl, zig_flags: -msoft-float, qemu: qemu-mips }
          - { zig_target: mipsel-linux-musl, zig_flags: -msoft-float, qemu: qemu-mipsel }
          - { zig_target: powerpc-linux-musl, qemu: qemu-ppc }
          - { zig_target: powerpc64-linux-musl, qemu: qemu-ppc64 }
          - { zig_target: powerpc64le-linux-musl, qemu: qemu-ppc64le }
          - { zig_target: x86_64-linux-musl, qemu: qemu-x86_64 }
          - { zig_target: x86_64-linux-musl, qemu: qemu-x86_64, zig_pic: -fPIE }
          - { zig_target: x86_64-macos-none }
          - { zig_target: x86_64-macos.11.0-none }
          - { zig_target: x86_64-macos.12.0-none }
          - { zig_target: x86_64-macos.13.0-none }
          - { zig_target: x86_64-windows-gnu }
    env:
      ##UPX_CONFIG_EXPECT_THREADS: 'ON'
      # zig is currently missing winpthreads; see https://github.com/ziglang/zig/issues/10989
      UPX_CONFIG_EXPECT_THREADS: ${{ contains(matrix.zig_target, '-windows-') && 'OFF' || 'ON' }}
      # for zig-cc wrapper scripts (see below):
      ZIG_CPPFLAGS: -DUPX_DOCTEST_CONFIG_MULTITHREADING
      ZIG_FLAGS: ${{ matrix.zig_flags }}
      ZIG_PIC: ${{ matrix.zig_pic }}
      ZIG_TARGET: ${{ matrix.zig_target }}
    steps:
      - name: 'Install Alpine Linux container packages'
        if: ${{ job.container }}
        shell: sh
        run: |
          apk update && apk upgrade && apk add bash cmake file git make tar xz
          # set PATH like in Ubuntu
          echo "PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV
          # this seems to be needed when running in a container (beause of UID mismatch??)
          git config --global --add safe.directory '*'
          # pledge
          case "${{ matrix.zig_target }}" in
            aarch64-linux-*) echo "UPX_CONFIG_EXPECT_PLEDGE=ON" >> $GITHUB_ENV ;;
            x86_64-linux-*)  echo "UPX_CONFIG_EXPECT_PLEDGE=ON" >> $GITHUB_ENV ;;
          esac
      - name: 'Check out code'
        uses: actions/checkout@v4
        with: { submodules: true }
      - name: ${{ format('Install Zig {0}', env.ZIG_DIST_VERSION) }}
        shell: bash
        run: |
          # GitHub Actions magic: set "UPX_GITREV_SHORT" environment value for use in steps below
          rev=$(git rev-parse --short=7 HEAD)
          echo "UPX_GITREV_SHORT=$rev" >> $GITHUB_ENV
          # update ZIG_TARGET (i386 => x86)
          ZIG_TARGET=${ZIG_TARGET/i386-/x86-}
          echo "ZIG_TARGET=$ZIG_TARGET" >> $GITHUB_ENV
          # install zig; note that ~/.local/bin is included in the default $PATH on Ubuntu
          mkdir -p -v ~/.local/bin
          cd ~/.local/bin
          ZIG_DIST_NAME=zig-linux-x86_64-${ZIG_DIST_VERSION}
          wget -q https://ziglang.org/builds/${ZIG_DIST_NAME}.tar.xz
          ls -l ${ZIG_DIST_NAME}.tar.xz
          tar -xoJf ${ZIG_DIST_NAME}.tar.xz
          rm ${ZIG_DIST_NAME}.tar.xz
          ln -s -v ${ZIG_DIST_NAME}/zig zig
          #echo "PATH=$PATH" && which zig
          echo -n 'zig version: '; zig version
          # create wrapper scripts (needed for CMake)
          echo -e '#!/bin/sh\nexec zig ar "$@"' > zig-ar
          echo -e '#!/bin/sh\nexec zig cc  -target $ZIG_TARGET $ZIG_PIC $ZIG_FLAGS $ZIG_CPPFLAGS $ZIG_CFLAGS   "$@"' > zig-cc
          echo -e '#!/bin/sh\nexec zig c++ -target $ZIG_TARGET $ZIG_PIC $ZIG_FLAGS $ZIG_CPPFLAGS $ZIG_CXXFLAGS "$@"' > zig-cxx
          echo -e '#!/bin/sh\nexec zig ranlib "$@"' > zig-ranlib
          chmod +x zig-ar zig-cc zig-cxx zig-ranlib
          ls -la; head zig-ar zig-cc zig-cxx zig-ranlib
      - name: ${{ format('Build Release with zig-cc -target {0} {1}', env.ZIG_TARGET, env.ZIG_PIC) }}
        run: |
          make UPX_XTARGET=zig/${ZIG_TARGET}${ZIG_PIC} xtarget/release \
            CC="zig-cc" CXX="zig-cxx" CMAKE_AR="$HOME/.local/bin/zig-ar" CMAKE_RANLIB="$HOME/.local/bin/zig-ranlib"
          file build/zig/${ZIG_TARGET}${ZIG_PIC}/release/upx*
      - name: ${{ format('Build Debug with zig-cc -target {0} {1}', env.ZIG_TARGET, env.ZIG_PIC) }}
        run: |
          make UPX_XTARGET=zig/${ZIG_TARGET}${ZIG_PIC} xtarget/debug \
           CC="zig-cc" CXX="zig-cxx" CMAKE_AR="$HOME/.local/bin/zig-ar" CMAKE_RANLIB="$HOME/.local/bin/zig-ranlib"
          file build/zig/${ZIG_TARGET}${ZIG_PIC}/debug/upx*
      - name: ${{ format('Make artifact from upx-{0}-{1}', github.ref_name, env.UPX_GITREV_SHORT) }}
        shell: bash
        run: |
          N=$(echo "upx-${GITHUB_REF_NAME}-${GITHUB_SHA:0:7}-weekly-ci-zigcc-${{ matrix.zig_target }}${ZIG_PIC}" | sed 's/[^0-9a-zA-Z_.-]/-/g')
          mkdir -p "tmp/artifact/$N"
          (cd build && shopt -s nullglob && cp -ai --parents */upx{,.exe} */*/*/upx{,.exe} "../tmp/artifact/$N")
          (cd tmp/artifact && tar --sort=name -czf "$N.tar.gz" "$N" && rm -rf "./$N")
          # GitHub Actions magic: set "artifact_name" environment value for use in next step
          echo "artifact_name=$N" >> $GITHUB_ENV
      - name: ${{ format('Upload artifact {0}', env.artifact_name) }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.artifact_name }}
          path: tmp/artifact
      - name: 'Run install tests'
        if: ${{ contains(matrix.zig_target, '-linux') }}
        run: |
          (cd build/zig/${ZIG_TARGET}${ZIG_PIC}/release && DESTDIR="$PWD/Install with cmake" cmake --install .)
          (cd build/zig/${ZIG_TARGET}${ZIG_PIC}/release && DESTDIR="$PWD/Install with make"  make install)
      - name: 'Run ctest tests'
        if: ${{ matrix.zig_target == 'i386-linux-musl' || matrix.zig_target == 'x86_64-linux-musl' }}
        run: |
          make -C build/zig/${ZIG_TARGET}${ZIG_PIC}/debug test
          make -C build/zig/${ZIG_TARGET}${ZIG_PIC}/release test
      - name: 'Mimic ctest tests'
        if: ${{ matrix.zig_target == 'i386-linux-musl' || matrix.zig_target == 'x86_64-linux-musl' }}
        run: |
          apk add coreutils
          env -C build/zig/${ZIG_TARGET}${ZIG_PIC}/debug   bash "$PWD"/misc/testsuite/mimic_ctest.sh
          env -C build/zig/${ZIG_TARGET}${ZIG_PIC}/release bash "$PWD"/misc/testsuite/mimic_ctest.sh
      - name: ${{ format('Mimic ctest tests with QEMU {0}', matrix.qemu) }}
        if: ${{ matrix.qemu }}
        run: |
          qemu="${{ matrix.qemu }}"
          apk add coreutils "${qemu%% *}"
          export upx_exe_runner="$qemu"
          env -C build/zig/${ZIG_TARGET}${ZIG_PIC}/debug   bash "$PWD"/misc/testsuite/mimic_ctest.sh
          env -C build/zig/${ZIG_TARGET}${ZIG_PIC}/release bash "$PWD"/misc/testsuite/mimic_ctest.sh
      - name: 'Mimic ctest tests with Valgrind'
        if: ${{ matrix.zig_target == 'x86_64-linux-musl' }}
        run: |
          apk add coreutils valgrind
          export upx_exe_runner="valgrind --leak-check=no --error-exitcode=1 --quiet --gen-suppressions=all"
          upx_exe_runner="$upx_exe_runner --suppressions=$PWD/misc/valgrind/musl.supp"
          env -C build/zig/${ZIG_TARGET}${ZIG_PIC}/debug   bash "$PWD"/misc/testsuite/mimic_ctest.sh
          env -C build/zig/${ZIG_TARGET}${ZIG_PIC}/release bash "$PWD"/misc/testsuite/mimic_ctest.sh
